{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api-end-points.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/services/get-nodejs-repo-open-issues.service.ts","webpack:///./src/app/services/get-nodejs-repos.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ApiEndPoints {\n    public gitHubNodejsReposUrl = 'https://api.github.com/orgs/nodejs/repos';\n    public gitHubNodejsRepoOpenIssuesUrl = 'https://api.github.com/repos/nodejs/reponame/issues?state=open';\n}\n","module.exports = \"\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h3>\\n    Welcome to Github NodeJS open issues!\\n  </h3>\\n  <h5>\\n    (limited to 60 requests per hour)\\n  </h5>\\n</div>\\n\\n<ul>\\n  <span *ngIf=\\\"loadingRepos === true\\\">\\n    loading repositories...\\n  </span>\\n  <li *ngFor=\\\"let repo of repos | async\\\">\\n    <span (click)=\\\"toggleOpenIssue(repo.name)\\\">{{repo.name}}</span>\\n    <span *ngIf=\\\"showIssues[repo.name]\\\">\\n      <ul>\\n        <span [ngSwitch]=\\\"!!openIssues[repo.name]\\\">\\n          <span *ngSwitchCase=\\\"true\\\">\\n            <span>Open issues: {{openIssues[repo.name].length}}</span>\\n            <li *ngFor=\\\"let openIssue of openIssues[repo.name]\\\">\\n              <sub *ngIf=\\\"openIssue\\\">{{openIssue.title}}</sub>\\n            </li>\\n          </span>\\n          <span *ngSwitchDefault>\\n            loading open issues...\\n          </span>\\n        </span>\\n      </ul>\\n    </span>\\n  </li>\\n</ul>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { GetNodejsReposService } from './services/get-nodejs-repos.service';\nimport { GetNodejsRepoOpenIssuesService } from './services/get-nodejs-repo-open-issues.service';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit {\n  title = 'app';\n  repos;\n  openIssues = {};\n  showIssues = {};\n  loadingRepos: Boolean = false;\n  errorResponse: any;\n\n\n  constructor(private _repos: GetNodejsReposService, private _openIssues: GetNodejsRepoOpenIssuesService) {\n    this.loadingRepos = true;\n    this.repos = _repos.nodejsRepos$.pipe(\n      tap(_ => this.loadingRepos = false),\n      catchError(err => {\n        this.errorResponse = err;\n        console.log('ERROR repos:', err);\n        return throwError(err);\n      })\n    );\n    console.log('AppComponent constructed');\n  }\n\n  ngOnInit() {}\n\n  toggleOpenIssue(repoName): void {\n    this.showIssues[repoName] = !this.showIssues[repoName];\n    if (this.showIssues[repoName] && !this.openIssues[repoName]) {\n      this._openIssues.getRepoIssues$(repoName)\n        .subscribe(data => {\n          this.openIssues[repoName] = data;\n        },\n        (err) => {\n          this.errorResponse = err;\n          console.log('ERROR issues:', repoName);\n          console.log(err);\n          return throwError(err);\n        }\n      );\n    }\n  }\n}\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [HttpClientModule],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiEndPoints } from '../api-end-points';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class GetNodejsRepoOpenIssuesService {\n  constructor(private _http: HttpClient, private _api: ApiEndPoints) {}\n\n  getRepoIssues$(repoName: string) {\n    const issueUrl = this._api.gitHubNodejsRepoOpenIssuesUrl.replace('reponame', repoName);\n    return this._http.get<any>(issueUrl);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable} from 'rxjs';\nimport { ApiEndPoints } from '../api-end-points';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GetNodejsReposService {\n  public nodejsRepos$: Observable<any>;\n\n  constructor(private _http: HttpClient, private _api: ApiEndPoints) {\n    this.nodejsRepos$ = _http.get<any>(this._api.gitHubNodejsReposUrl);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}